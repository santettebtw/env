-- grapepunk.lua - A Neovim colorscheme
-- Generated with Lush.nvim based on provided terminal colors

-- Import lush safely
local lush_status, lush = pcall(require, "lush")
if not lush_status then
  return print("lush.nvim not installed")
end

local hsl = require("lush.hsl")

-- Define color palette
local colors = {
  -- Base colors
  bg         = hsl("#161616"),
  fg         = hsl("#C5C8C6"),
  black      = hsl("#27292D"),
  red        = hsl("#D44C6D"),
  green      = hsl("#30BA6F"),
  yellow     = hsl("#D0E460"),
  blue       = hsl("#7D57F8"),
  magenta    = hsl("#EB60D5"),
  cyan       = hsl("#01D6D4"),
  white      = hsl("#BDBDBD"),

  -- Bright variants
  br_black   = hsl("#4B4B4B"),
  br_red     = hsl("#FC5D85"),
  br_green   = hsl("#00D686"),
  br_yellow  = hsl("#E8FD70"),
  br_blue    = hsl("#9978FE"),
  br_magenta = hsl("#FC7BE9"),
  br_cyan    = hsl("#00FDFD"),
  br_white   = hsl("#E5E5E5"),

  -- Additional shades
  gray1      = hsl("#333333"),
  gray2      = hsl("#555555"),
  gray3      = hsl("#777777"),
  bg_dark    = hsl("#121212"),
  bg_light   = hsl("#202020"),
  bg_lighter = hsl("#2A2A2A"),
}

-- Define the colorscheme using Lush
local theme = lush(function(injected_functions)
  local sym = injected_functions.sym
  ---@diagnostic disable: undefined-global
  return {
    -- Core syntax highlighting
    Normal       { fg = colors.fg, bg = colors.bg },
    NormalFloat  { Normal, bg = colors.bg_dark },
    NormalNC     { Normal },
    Comment      { fg = colors.gray3, gui = "italic" },
    Constant     { fg = colors.yellow },
    String       { fg = colors.br_green },
    Character    { fg = colors.green },
    Number       { fg = colors.br_yellow },
    Boolean      { fg = colors.br_yellow, gui = "bold" },
    Float        { Number },
    Identifier   { fg = colors.fg },
    Function     { fg = colors.blue, gui = "bold" },
    Statement    { fg = colors.magenta },
    Conditional  { fg = colors.magenta },
    Repeat       { fg = colors.magenta },
    Label        { fg = colors.br_magenta },
    Operator     { fg = colors.br_white },
    Keyword      { fg = colors.blue },
    Exception    { fg = colors.red, gui = "bold" },
    PreProc      { fg = colors.br_blue },
    Include      { fg = colors.blue },
    Define       { fg = colors.magenta },
    Macro        { fg = colors.magenta },
    PreCondit    { fg = colors.br_blue },
    Type         { fg = colors.cyan.li(-30) },
    StorageClass { fg = colors.yellow },
    Structure    { fg = colors.br_cyan },
    Typedef      { fg = colors.yellow },
    Special      { fg = colors.br_cyan },
    SpecialChar  { fg = colors.br_green },
    Tag          { fg = colors.red },
    Delimiter    { fg = colors.gray3 },
    SpecialComment { fg = colors.gray3, gui = "italic" },
    Debug        { fg = colors.br_red },
    Underlined   { gui = "underline" },
    Ignore       { fg = colors.gray1 },
    Error        { fg = colors.br_red, gui = "bold" },
    Todo         { fg = colors.br_yellow, bg = colors.bg_light, gui = "bold" },

    -- UI elements
    ColorColumn    { bg = colors.bg_light },
    Conceal        { fg = colors.gray3 },
    Cursor         { fg = colors.bg, bg = colors.fg },
    CursorColumn   { bg = colors.bg_light },
    CursorLine     { bg = colors.bg_light },
    Directory      { fg = colors.blue },
    DiffAdd        { fg = colors.bg, bg = colors.green },
    DiffChange     { fg = colors.bg, bg = colors.yellow },
    DiffDelete     { fg = colors.bg, bg = colors.red },
    DiffText       { fg = colors.bg, bg = colors.br_blue },
    EndOfBuffer    { fg = colors.gray1 },
    TermCursor     { Cursor },
    TermCursorNC   { Cursor },
    ErrorMsg       { fg = colors.red },
    VertSplit      { fg = colors.gray1, bg = colors.bg },
    Folded         { fg = colors.gray3, bg = colors.bg_light },
    FoldColumn     { fg = colors.gray3, bg = colors.bg },
    SignColumn     { fg = colors.gray3, bg = colors.bg },
    IncSearch      { fg = colors.bg, bg = colors.br_cyan },
    Substitute     { fg = colors.bg, bg = colors.yellow },
    LineNr         { fg = colors.blue, gui = "bold" },
    LineNrAbove    { fg = colors.gray2, bg = colors.bg, gui = "italic" },
    LineNrBelow    { fg = colors.gray2, bg = colors.bg, gui = "italic" },
    CursorLineNr   { fg = colors.br_white, gui = "bold" },
    MatchParen     { fg = colors.br_cyan, gui = "bold" },
    ModeMsg        { fg = colors.green },
    MsgArea        { Normal },
    MsgSeparator   { bg = colors.bg_light },
    MoreMsg        { fg = colors.green },
    NonText        { fg = colors.gray2 },
    Pmenu          { fg = colors.fg, bg = colors.bg_light },
    PmenuSel       { fg = colors.fg, bg = colors.gray2 },
    PmenuSbar      { bg = colors.bg_lighter },
    PmenuThumb     { bg = colors.gray3 },
    Question       { fg = colors.br_blue },
    QuickFixLine   { bg = colors.bg_light },
    Search         { fg = colors.bg, bg = colors.yellow },
    SpecialKey     { fg = colors.br_cyan },
    SpellBad       { fg = colors.red, gui = "underline" },
    SpellCap       { fg = colors.yellow, gui = "underline" },
    SpellLocal     { fg = colors.blue, gui = "underline" },
    SpellRare      { fg = colors.magenta, gui = "underline" },
    StatusLine     { fg = colors.br_white, bg = colors.bg_light },
    StatusLineNC   { fg = colors.gray3, bg = colors.bg_light },
    TabLine        { fg = colors.gray3, bg = colors.bg_light },
    TabLineFill    { bg = colors.bg_dark },
    TabLineSel     { fg = colors.fg, bg = colors.bg },
    Title          { fg = colors.br_magenta, gui = "bold" },
    Visual         { fg = colors.bg_dark, bg = colors.br_yellow },
    VisualNOS      { Visual },
    WarningMsg     { fg = colors.yellow },
    Whitespace     { fg = colors.gray1 },
    WildMenu       { PmenuSel },

    -- LSP and diagnostics
    LspDiagnosticsDefaultError         { fg = colors.red },
    LspDiagnosticsDefaultWarning       { fg = colors.yellow },
    LspDiagnosticsDefaultInformation   { fg = colors.blue },
    LspDiagnosticsDefaultHint          { fg = colors.cyan },
    LspDiagnosticsVirtualTextError     { fg = colors.red },
    LspDiagnosticsVirtualTextWarning   { fg = colors.yellow },
    LspDiagnosticsVirtualTextInformation { fg = colors.blue },
    LspDiagnosticsVirtualTextHint      { fg = colors.cyan },
    LspDiagnosticsUnderlineError       { gui = "underline" },
    LspDiagnosticsUnderlineWarning     { gui = "underline" },
    LspDiagnosticsUnderlineInformation { gui = "underline" },
    LspDiagnosticsUnderlineHint        { gui = "underline" },
    LspDiagnosticsFloatingError        { fg = colors.red, bg = colors.bg_light },
    LspDiagnosticsFloatingWarning      { fg = colors.yellow, bg = colors.bg_light },
    LspDiagnosticsFloatingInformation  { fg = colors.blue, bg = colors.bg_light },
    LspDiagnosticsFloatingHint         { fg = colors.cyan, bg = colors.bg_light },
    LspDiagnosticsSignError            { fg = colors.red },
    LspDiagnosticsSignWarning          { fg = colors.yellow },
    LspDiagnosticsSignInformation      { fg = colors.blue },
    LspDiagnosticsSignHint             { fg = colors.cyan },

    DiagnosticError                    { fg = colors.red },
    DiagnosticWarn                     { fg = colors.yellow },
    DiagnosticInfo                     { fg = colors.blue },
    DiagnosticHint                     { fg = colors.cyan },
    DiagnosticVirtualTextError         { fg = colors.red, bg = colors.bg_light },
    DiagnosticVirtualTextWarn          { fg = colors.yellow, bg = colors.bg_light },
    DiagnosticVirtualTextInfo          { fg = colors.blue, bg = colors.bg_light },
    DiagnosticVirtualTextHint          { fg = colors.cyan, bg = colors.bg_light },
    DiagnosticUnderlineError           { gui = "underline" },
    DiagnosticUnderlineWarn            { gui = "underline" },
    DiagnosticUnderlineInfo            { gui = "underline" },
    DiagnosticUnderlineHint            { gui = "underline" },
    DiagnosticFloatingError            { fg = colors.red, bg = colors.bg_light },
    DiagnosticFloatingWarn             { fg = colors.yellow, bg = colors.bg_light },
    DiagnosticFloatingInfo             { fg = colors.blue, bg = colors.bg_light },
    DiagnosticFloatingHint             { fg = colors.cyan, bg = colors.bg_light },
    DiagnosticSignError                { fg = colors.red },
    DiagnosticSignWarn                 { fg = colors.yellow },
    DiagnosticSignInfo                 { fg = colors.blue },
    DiagnosticSignHint                 { fg = colors.cyan },

    -- Treesitter syntax
    TSAttribute             { PreProc },
    TSAttributeBuiltin      { TSAttribute, gui = "italic" },
    TSBoolean               { Boolean },
    TSCharacter             { Character },
    TSCharacterSpecial      { Character },
    TSComment               { Comment },
    TSCommentDocumentation  { TSComment, gui = "bold" },
    TSConditional           { Conditional },
    TSConditionalTernary    { TSConditional },
    TSConstant              { Constant },
    TSConstBuiltin          { Constant, gui = "italic" },
    TSConstMacro            { Define },
    TSModule                { fg = colors.br_cyan.li(-50), gui = "italic" },
    TSModuleBuiltin         { TSModule, gui = "italic" },
    TSLabel                 { Label },
    TSConstructor           { fg = colors.br_cyan, gui = "bold" },
    TSError                 { Error },
    TSException             { Exception },
    TSField                 { fg = colors.fg },
    TSFloat                 { Float },
    TSFunction              { Function },
    TSFuncBuiltin           { TSFunction, gui = "italic" },
    TSFuncCall              { TSFunction, gui = "bold" },
    TSFuncMacro             { Macro },
    TSInclude               { Include },
    TSKeyword               { Keyword },
    TSKeywordCoroutine      { TSKeyword },
    TSKeywordFunction       { fg = colors.magenta },
    TSKeywordOperator       { fg = colors.magenta },
    TSKeywordImport         { TSKeyword },
    TSKeywordType           { TSKeyword },
    TSKeywordModifier       { TSKeyword },
    TSKeywordRepeat         { TSKeyword },
    TSKeywordReturn         { TSKeyword, gui = "italic" },
    TSKeywordDebug          { TSKeyword, bg = colors.red },
    TSKeywordException      { TSKeyword },
    TSKeywordDirective      { TSKeyword },
    TSKeywordDirectiveDefine { TSKeyword, gui = "italic" },
    TSMethod                { Function },
    TSMethodCall            { TSMethod },
    TSNamespace             { fg = colors.br_cyan },
    TSNone                  {},
    TSNumber                { Number },
    TSOperator              { Operator },
    TSParameter             { fg = colors.fg },
    TSParameterBuiltin      { fg = "#00FF00", gui = "italic" },
    TSVariableMember        { fg = "#00FF00", gui = "italic" },
    TSParameterReference    { fg = colors.fg },
    TSProperty              { fg = colors.cyan },
    TSPunctDelimiter        { Delimiter },
    TSPunctBracket          { fg = colors.gray3 },
    TSPunctSpecial          { Special },
    TSRepeat                { Repeat },
    TSString                { String },
    TSStringDocumentation   { TSString },
    TSStringRegex           { fg = colors.br_green },
    TSStringEscape          { SpecialChar },
    TSSymbol                { fg = colors.br_cyan },
    TSTag                   { Tag },
    TSTagDelimiter          { Delimiter },
    TSText                  { fg = colors.fg },
    TSStrong                { gui = "bold" },
    TSEmphasis              { gui = "italic" },
    TSUnderline             { gui = "underline" },
    TSStrike                { gui = "strikethrough" },
    TSTitle                 { Title },
    TSTitle1                { Title, fg = colors.bg_dark, bg = colors.red },
    TSTitle2                { Title, fg = colors.bg_dark, bg = colors.green },
    TSTitle3                { Title, fg = colors.bg_dark, bg = colors.yellow },
    TSTitle4                { Title, fg = colors.bg_dark, bg = colors.blue },
    TSTitle5                { Title, fg = colors.bg_dark, bg = colors.magenta },
    TSTitle6                { Title, fg = colors.bg_dark, bg = colors.cyan },
    TSLiteral               { String },
    TSURI                   { fg = colors.green, gui = "underline" },
    TSMath                  { fg = colors.br_blue },
    TSTextReference         { fg = colors.br_magenta },
    TSEnviroment            { fg = colors.br_magenta },
    TSEnviromentName        { fg = colors.green },
    TSNote                  { fg = colors.bg, bg = colors.blue },
    TSWarning               { fg = colors.bg, bg = colors.yellow },
    TSDanger                { fg = colors.bg, bg = colors.red },
    TSTodo                  { Todo },
    TSType                  { Type },
    TSTypeBuiltin           { Type, gui = "italic" },
    TSTypeDefinition        { Type, gui = "bold" },
    TSVariable              { fg = colors.fg },
    TSVariableBuiltin       { fg = colors.br_red, gui = "italic" },

    -- Treesitter symbol mappings
    sym"@variable"                      { TSVariable },
    sym"@variable.builtin"              { TSVariableBuiltin },
    sym"@variable.parameter"            { TSParameter },
    sym"@variable.parameter.builtin"    { TSParameterBuiltin },
    sym"@variable.member"               { TSVariableMember },
    sym"@constant"                      { TSConstant },
    sym"@constant.builtin"              { TSConstBuiltin },
    sym"@constant.macro"                { TSConstMacro },
    sym"@module"                        { TSModule },
    sym"@module.builtin"                { TSModuleBuiltin },
    sym"@label"                         { TSLabel },
    sym"@string"                        { TSString },
    sym"@string.documentation"          { TSStringDocumentation },
    sym"@character"                     { TSCharacter },
    sym"@character.special"             { TSCharacterSpecial },
    sym"@boolean"                       { TSBoolean },
    sym"@number"                        { TSNumber },
    sym"@number.float"                  { TSFloat },
    sym"@type"                          { TSType },
    sym"@type.builtin"                  { TSTypeBuiltin },
    sym"@type.definition"               { TSTypeDefinition },
    sym"@attribute"                     { TSAttribute },
    sym"@attribute.builtin"             { TSAttributeBuiltin },
    sym"@property"                      { TSProperty },
    sym"@function"                      { TSFunction },
    sym"@function.builtin"              { TSFuncBuiltin },
    sym"@function.call"                 { TSFuncCall },
    sym"@function.macro"                { TSFuncMacro },
    sym"@function.method"               { TSMethod },
    sym"@function.method.call"          { TSMethodCall },
    sym"@constructor"                   { TSConstructor },
    sym"@operator"                      { TSOperator },
    sym"@keyword"                       { TSKeyword },
    sym"@keyword.coroutine"             { TSKeywordCoroutine },
    sym"@keyword.function"              { TSKeywordFunction },
    sym"@keyword.operator"              { TSKeywordOperator },
    sym"@keyword.import"                { TSKeywordImport },
    sym"@keyword.type"                  { TSKeywordType },
    sym"@keyword.modifier"              { TSKeywordModifier },
    sym"@keyword.repeat"                { TSKeywordRepeat },
    sym"@keyword.return"                { TSKeywordReturn },
    sym"@keyword.debug"                 { TSKeywordDebug },
    sym"@keyword.exception"             { TSKeywordException },
    sym"@keyword.conditional"           { TSConditional },
    sym"@keyword.conditional.ternary"   { TSConditionalTernary },
    sym"@keyword.directive"             { TSKeywordDirective },
    sym"@keyword.directive.define"      { TSKeywordDirectiveDefine },
    sym"@punctuation.delimiter"         { TSPunctDelimiter },
    sym"@punctuation.bracket"           { TSPunctBracket },
    sym"@punctuation.special"           { TSPunctSpecial },
    sym"@comment"                       { TSComment },
    sym"@comment.documentation"         { TSCommentDocumentation },
    sym"@comment.error"                 { TSError },
    sym"@comment.warning"               { TSWarning },
    sym"@comment.todo"                  { TSTodo },
    sym"@comment.note"                  { TSNote },
    sym"@markup.strong"                 { TSStrong, bg = colors.bg_dark },
    sym"@markup.italic"                 { TSEmphasis, bg = colors.bg_dark },
    sym"@markup.strikethrough"          { TSStrike },
    sym"@markup.underline"              { TSUnderline },
    sym"@markup.heading"                { TSTitle },
    sym"@markup.heading.1"              { TSTitle1 },
    sym"@markup.heading.2"              { TSTitle2 },
    sym"@markup.heading.3"              { TSTitle3 },
    sym"@markup.heading.4"              { TSTitle4 },
    sym"@markup.heading.5"              { TSTitle5 },
    sym"@markup.heading.6"              { TSTitle6 },
    sym"@markup.quote"                  { Special },
    sym"@markup.math"                   { Special },
    sym"@markup.link"                   { TSURI },
    sym"@markup.link.label"             { TSURI, fg = Normal.fg },
    sym"@markup.link.url"               { TSURI },
    sym"@markup.raw"                    { bg = colors.bg_dark },
    sym"@markup.raw.block"              { bg = colors.bg_dark },
    sym"@markup.list"                   { Special },
    sym"@markup.list.checked"           { Special },
    sym"@markup.list.unchecked"         { Special, fg = Type.fg.li(-10) },

    -- Git-related highlighting
    gitcommitOverflow       { fg = colors.red },
    gitcommitSummary        { fg = colors.green },
    gitcommitComment        { Comment },
    gitcommitUntracked      { Comment },
    gitcommitDiscarded      { Comment },
    gitcommitSelected       { Comment },
    gitcommitHeader         { fg = colors.magenta },
    gitcommitSelectedType   { fg = colors.blue },
    gitcommitUnmergedType   { fg = colors.blue },
    gitcommitDiscardedType  { fg = colors.blue },
    gitcommitBranch         { fg = colors.br_magenta, gui = "bold" },
    gitcommitUntrackedFile  { fg = colors.yellow },
    gitcommitUnmergedFile   { fg = colors.red, gui = "bold" },
    gitcommitDiscardedFile  { fg = colors.red },
    gitcommitSelectedFile   { fg = colors.green },
    GitSignsAdd             { fg = colors.green },
    GitSignsChange          { fg = colors.yellow },
    GitSignsDelete          { fg = colors.red },
    GitSignsCurrentLineBlame { fg = colors.gray3 },

    -- Plugin-specific highlighting
    -- NvimTree
    NvimTreeNormal          { fg = colors.fg, bg = colors.bg_dark },
    NvimTreeEndOfBuffer     { fg = colors.bg_dark, bg = colors.bg_dark },
    NvimTreeRootFolder      { fg = colors.br_blue, gui = "bold" },
    NvimTreeGitDirty        { fg = colors.yellow },
    NvimTreeGitNew          { fg = colors.green },
    NvimTreeGitDeleted      { fg = colors.red },
    NvimTreeSpecialFile     { fg = colors.cyan, gui = "underline" },
    NvimTreeIndentMarker    { fg = colors.gray2 },
    NvimTreeImageFile       { fg = colors.br_magenta },
    NvimTreeSymlink         { fg = colors.br_cyan },
    NvimTreeFolderName      { fg = colors.blue },

    -- Telescope
    TelescopeNormal         { fg = colors.fg, bg = colors.bg_dark },
    TelescopeBorder         { fg = colors.gray2, bg = colors.bg_dark },
    TelescopePromptPrefix   { fg = colors.magenta },
    TelescopeSelection      { fg = colors.fg, bg = colors.bg_light },

    -- Dashboard
    DashboardShortCut       { fg = colors.magenta },
    DashboardHeader         { fg = colors.blue },
    DashboardCenter         { fg = colors.cyan },
    DashboardFooter         { fg = colors.green, gui = "italic" },

    -- WhichKey
    WhichKey                { fg = colors.cyan },
    WhichKeyGroup           { fg = colors.blue },
    WhichKeyDesc            { fg = colors.magenta },
    WhichKeySeperator       { fg = colors.gray3 },
    WhichKeySeparator       { fg = colors.gray3 },
    WhichKeyFloat           { bg = colors.bg_dark },
    WhichKeyValue           { fg = colors.gray3 },

    -- Bufferline
    BufferLineFill          { bg = colors.bg_dark },
    BufferLineBackground    { fg = colors.gray3, bg = colors.bg_light },
    BufferLineBufferVisible { fg = colors.gray3, bg = colors.bg },
    BufferLineBufferSelected { fg = colors.fg, bg = colors.bg, gui = "bold" },
    BufferLineTab           { fg = colors.gray3, bg = colors.bg_light },
    BufferLineTabSelected   { fg = colors.bg_light, bg = colors.magenta },
    BufferLineTabClose      { fg = colors.red, bg = colors.bg_dark },
    BufferLineIndicatorSelected { fg = colors.magenta, bg = colors.bg },
    BufferLineSeparator     { fg = colors.bg_dark, bg = colors.bg_light },
    BufferLineSeparatorVisible { fg = colors.bg_dark, bg = colors.bg },
    BufferLineSeparatorSelected { fg = colors.bg_dark, bg = colors.bg },

    -- Barbar
    BufferCurrent           { fg = colors.fg, bg = colors.bg, gui = "bold" },
    BufferCurrentIndex      { fg = colors.blue, bg = colors.bg },
    BufferCurrentMod        { fg = colors.yellow, bg = colors.bg, gui = "bold" },
    BufferCurrentSign       { fg = colors.blue, bg = colors.bg },
    BufferCurrentTarget     { fg = colors.red, bg = colors.bg, gui = "bold" },
    BufferVisible           { fg = colors.gray3, bg = colors.bg },
    BufferVisibleIndex      { fg = colors.gray3, bg = colors.bg },
    BufferVisibleMod        { fg = colors.yellow, bg = colors.bg },
    BufferVisibleSign       { fg = colors.gray3, bg = colors.bg },
    BufferVisibleTarget     { fg = colors.red, bg = colors.bg },
    BufferInactive          { fg = colors.gray3, bg = colors.bg_light },
    BufferInactiveIndex     { fg = colors.gray3, bg = colors.bg_light },
    BufferInactiveMod       { fg = colors.yellow, bg = colors.bg_light },
    BufferInactiveSign      { fg = colors.gray3, bg = colors.bg_light },
    BufferInactiveTarget    { fg = colors.red, bg = colors.bg_light },

    -- Hop
    HopNextKey              { fg = colors.br_magenta, gui = "bold" },
    HopNextKey1             { fg = colors.br_blue, gui = "bold" },
    HopNextKey2             { fg = colors.blue },
    HopUnmatched            { fg = colors.gray3 },

    -- StatusLine components
    StatusLineGitBranch     { fg = colors.magenta, bg = colors.bg_light },
    StatusLineModified      { fg = colors.yellow, bg = colors.bg_light },
    StatusLineReadOnly      { fg = colors.red, bg = colors.bg_light },
    StatusLineFileName      { fg = colors.blue, bg = colors.bg_light },
    StatusLineFileType      { fg = colors.cyan, bg = colors.bg_light },
    StatusLineFileEncoding  { fg = colors.gray3, bg = colors.bg_light },
    StatusLineLinePercent   { fg = colors.br_white, bg = colors.bg_light },
    StatusLineLineCol       { fg = colors.br_white, bg = colors.bg_light },

    -- IndentBlankline
    IndentBlanklineChar     { fg = colors.gray1 },
    IndentBlanklineContextChar { fg = colors.gray3 },

    -- Completion (Cmp)
    CmpItemAbbr             { fg = colors.fg },
    CmpItemAbbrDeprecated   { fg = colors.gray3, gui = "strikethrough" },
    CmpItemAbbrMatch        { fg = colors.br_blue, gui = "bold" },
    CmpItemAbbrMatchFuzzy   { fg = colors.br_blue },
    CmpItemKind             { fg = colors.yellow },
    CmpItemMenu             { fg = colors.gray3 },

    -- Miscellaneous
    FloatBorder             { fg = colors.gray2, bg = colors.bg_light },

    -- MiniDiffSign
    MiniDiffSignAdd         { DiffAdd },
    MiniDiffSignChange      { DiffChange },
    MiniDiffSignDelete      { DiffDelete },

    -- LineNrDiagnostics
    LineNrDiagnosticsError   { DiagnosticError, reverse = true },
    LineNrDiagnosticsWarn    { DiagnosticWarn, reverse = true },
    LineNrDiagnosticsHint    { DiagnosticHint, reverse = true },
    LineNrDiagnosticsInfo    { DiagnosticInfo, reverse = true },
  }
end)

-- Return the theme
return theme
