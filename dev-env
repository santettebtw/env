#!/usr/bin/env bash

# --- Environment setup ---
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DEV_ENV="${DEV_ENV:?env var DEV_ENV needs to be present}"

RED='\033[0;31m'
GREEN='\033[0;33m'
NC='\033[0m'

mode=${1:-}
if [[ -z "$mode" ]]; then
    echo "Usage: $0 {diff|apply|dry|put-keys} [--full]"
    exit 1
fi

full_diff=0
if [[ "${2:-}" == "--full" ]]; then
    full_diff=1
fi

log() { echo "$1"; }

# --- Secrets management ---
put_keys() {
    local plain=$1
    local encrypted=$2

    if [[ ! -f "$plain" ]]; then
        log "No plaintext keyfile at $plain"
        return 1
    fi

    log "Encrypting $plain -> $encrypted"
    gpg -c --batch --yes --output "$encrypted" "$plain"
}

get_keys() {
    local encrypted=$1
    local plain=$2

    if [[ ! -f "$encrypted" ]]; then
        log "No encrypted keyfile at $encrypted"
        return 1
    fi

    log "Decrypting $encrypted -> $plain"
    mkdir -p "$(dirname "$plain")"
    gpg --quiet --batch --yes --output "$plain" --decrypt "$encrypted"
}

# --- Diff summary ---
show_diff() {
    local src=$1 dest=$2
    [[ ! -e $src ]]  && { log "source $src missing"; return; }
    [[ ! -e $dest ]] && { log "dest $dest missing"; return; }

    log ">>> comparing: $src -> $dest"

    if [[ $full_diff -eq 1 ]]; then
        local diff_output
        diff_output=$(diff -ruN --color=always "$dest" "$src" || true)

        if [[ -n "$diff_output" ]]; then
            echo "$diff_output" | less -R
        else
            log "no differences"
        fi
    else
        # summary mode (diffstat-like)
		diff -ruN "$dest" "$src" | awk '
			BEGIN {
				RED="\033[31m"; GREEN="\033[32m"; RESET="\033[0m"
			}
			/^diff /     { file=$3; next }
			/^\+\+\+/    { next }
			/^---/       { next }
			/^\+/        { add[file]++ }
			/^-/         { del[file]++ }
			END {
				total_add=0; total_del=0; files=0
				for (f in add) {
					printf "%s | %s+%d%s %s-%d%s\n", f, GREEN, add[f], RESET, RED, del[f], RESET
					total_add+=add[f]; total_del+=del[f]; files++
				}
				for (f in del) {
					if (!(f in add)) {
						printf "%s | %s+0%s %s-%d%s\n", f, GREEN, RESET, RED, del[f], RESET
						total_del+=del[f]; files++
					}
				}
				if (files > 0) {
					printf("\n%d files changed, %s%d insertions(+)%s, %s%d deletions(-)%s\n", files, GREEN, total_add, RESET, RED, total_del, RESET)
				}
			}
		'
    fi
}

sync() {
    local src_root=$1 dest_root=$2

    if [[ -d "$src_root" ]]; then
        # directory: iterate over items
        for item in "$src_root"/*; do
            [[ ! -e $item ]] && continue
            local rel=${item#"$src_root"/}   # relative path
            local dest="$dest_root/$rel"

            case $mode in
                diff)  show_diff "$item" "$dest" ;;
                dry)   log "[DRY] would replace: $dest <- $item" ;;
                apply)
                    log "replacing: $dest <- $item"
                    rm -rf "$dest"
                    cp -r "$item" "$dest"
                    ;;
            esac
        done
    elif [[ -f "$src_root" ]]; then
        # file: just sync it directly
        case $mode in
            diff)  show_diff "$src_root" "$dest_root" ;;
            dry)   log "[DRY] would replace: $dest_root <- $src_root" ;;
            apply)
                log "replacing: $dest_root <- $src_root"
                rm -f "$dest_root"
                cp "$src_root" "$dest_root"
                ;;
        esac
    else
        log "source $src_root does not exist"
    fi
}

# --- Run ---
log "env: $DEV_ENV"

case $mode in
    diff|dry|apply)
        # Directories to sync
        sync "$DEV_ENV/env/.config" "$XDG_CONFIG_HOME"
        sync "$DEV_ENV/env/.local"  "$HOME/.local"

        # Individual files
        sync "$DEV_ENV/env/.zshrc" "$HOME/.zshrc"
        sync "$DEV_ENV/env/.gitconfig" "$HOME/.gitconfig"
        sync "$DEV_ENV/env/.gitconfig-personal" "$HOME/.gitconfig-personal"
        sync "$DEV_ENV/env/.gitconfig-school" "$HOME/.gitconfig-school"
        sync "$DEV_ENV/env/.zsh/config" "$HOME/.zsh/config"
        sync "$DEV_ENV/dev-env" "$HOME/.local/bin/dev-env"

        # Secrets: only decrypt when applying
        [[ $mode == "apply" ]] && get_keys "$DEV_ENV/env/api_keys.sh.gpg" "$HOME/personal/.private/api_keys.sh"
        ;;
    put-keys)
        put_keys "$HOME/personal/.private/api_keys.sh" "$DEV_ENV/env/api_keys.sh.gpg"
        ;;
    *)
        echo "Usage: $0 {diff|apply|dry|put-keys}"
        exit 1
        ;;
esac
